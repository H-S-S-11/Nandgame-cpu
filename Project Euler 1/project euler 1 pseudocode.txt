From projecteuler.net,  problem 1:

"If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000."

This sum will probably exceed 2^15-1 (32,767), the largest number that a 16 bit register can hold (the actual answer is 233,168 -see python below).
Therefore to be a bit easier, I will go for all multiples of 3 or 5 below 100.

Using a python program I found the answer was 2318:
```
running_sum=0

for test_num in range(1, 100):
    if ((test_num%3)==0) or ((test_num%5)==0):
        running_sum=running_sum+test_num

print(running_sum)
```

My 16-bit cpu has an address register, data register, and 2^16 x 16 bit words of RAM. Basic boolean operations are avilable. The only
arithmetic available is add variable, subtract variable, increment, decrement and *-1

The following will be written into machine code. many lines will take multiple instructions. jump locations marked in brackets:

When run, the code (after a little debugging) produced the correct answer of 2318 in ~11,250 clock cycles

store 5 in RAM(0)
store 3 in RAM(1)
store 0 in RAM(2) //this will hold the running sum
store 1 in RAM(3) //this will hold the test number, incremented up to 200
store 300 in RAM(4) //to know when to finish main loop

(test_num loop start)

load RAM(3) into data reg

(divide by 5 loop start)
subtract: data-RAM(0) into data, loop if greater than 0

if data=0, jump to "add test_num to running sum"

load RAM(3) into data reg

(divide by 3 loop start)
subtract: data-RAM(1) into data, loop if greater than 0

if data=0, jump to "add test_num to running sum"

(return from "add test_num to running_sum")

increment RAM(3)
load RAM(3) into data reg
if data reg-RAM(4)<0, jump to "test_num loop start"

load RAM(2) into address reg
jump to "end of program"


(add test_num to running_sum)

load RAM(3) into data reg  
add: data+RAM(2) into RAM(2)
return

(end of program)
store 0 in address reg 2 times





